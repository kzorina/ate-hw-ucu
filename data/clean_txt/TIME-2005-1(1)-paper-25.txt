Temporal logic with predicate -abstraction.  Alexei Lisitsa and Igor Potapov  Department of Computer Science  University of Liverpool, U.K.  alexei,igor@csc.liv.ac.uk  world  holds of what  designates in a current world.  Abstract  A predicate linear temporal logic   without quantiďŹers but with predicate -abstraction mechanism and  equality is considered. The models of   can be naturally seen as the systems of pebbles (ďŹexible constants)  moving over the elements of some (possibly inďŹnite) dofor the speciďŹcation of dymain. This allows to use   namic systems using some resources, such as processes using memory locations, mobile agents occupying some sites,  is not recuretc. On the other hand we show that   sively axiomatizable and, therefore, fully automated veriďŹcation of   speciďŹcations via validity checking is not,  in general, possible. The result is based on computational  universality of the above abstract computational model of  pebble systems, which is of independent interest due to the  range of possible interpretations of such systems.  1 Introduction  In this paper we consider a predicate linear temporal  logic   without quantiďŹers but with predicate abstraction mechanism. The idea of predicate abstraction1  goes back to M.Fitting who has proposed this as the general technique for obtaining the modal logics, which are, in  a sense, intermediate between propositional and ďŹrst-order.  He suggested to extend a modal propositional logic by  adding relation symbols, ďŹexible constants and the operator  of predicate abstraction, but no quantiďŹers. The abstraction  is used as a scoping mechanism. Simple example of what  the abstraction can be used for is given by the following     and    . The  two formulae:  ďŹrst one says that  holds of what  designates in alternative world, while the second one says that at an alternative  Âż  Âż   Work partially supported by NAL/00684/G NF grant.  1 The term âpredicate abstractionâ is already been used in the literature  on veriďŹcation in a quite a different sense, see for example [7]. To avoid  any misunderstanding we will use the term âpredicate -abstractionâ, or  just â -abstractionâ.  Such an extension   (both with and without equality) can be alternatively seen as very restricted fragment of  corresponding ďŹrst-order variant  of . It is proved in  [2] that such extension when applied to   leads to the unbut for many other classical modal  decidable logic    logics their extensions   are still decidable.  We apply such an extension to the classical propositional  linear time logic. The models of   can be naturally seen as the systems of pebbles (ďŹexible constants)  moving over the elements of some (possibly inďŹnite) domain. This provides an abstract view on dynamic systems  using some resources, such as processes using memory locations, mobile agents occupying some sites, etc. Thus, despite being very restricted extension of propositional temis suitable for speciďŹcation of such  poral logic,   systems. However, we show, as a main result of this pais not only undecidable, but even is not  per, that   recursively axiomatizable. It follows that automatic veriďŹspeciďŹcations via validity checking is not,  cation of   in general, possible. On the other hand, the result is based  on the computational universality of the simple and abstract  computational model of pebble systems, which may be of  independent interest.  The paper is organised as follows. In the next section we  . In Section 3 we  present a syntax and semantics of   demonstrate the expressive power of   by giving a  range of examples of properties expressible in   and  for speciďŹcations  discuss possible applications of   of protocols. In Section 4 we present main ideas of modelling counter machines by pebble systems. In Section 5 we  use these ideas for modelling Minsky machines computaand prove the main result. In Section 6 we  tions in   extend the main result to the case of logic with only future  withtime modalities. In Section 7 it is shown that   out equality but with countably many unary predicates is  also not recursively axiomatizable. We conclude the paper  by Section 8.  Proceedings of the 12th International Symposium on Temporal Representation and Reasoning (TIMEâ05)  1530-1311/05 $20.00 ÂŠ 2005 IEEE  2 Syntax and Semantics  The content of this section is an adaptation of the corresponding section of [2] to the case of temporal logic.  Let         is an alphabet of variables and            is an alphabet of constant symbols.        is an alphabet of -ary  For each  let   relational symbols. We refer to the tuple       as  to the alphabet.  One may include or not an equality  in the alphabet  of binary relations symbols. In this paper we consider only  the case with equality. A term is a constant symbol or a  variable.   -formulas (in the alphabet  DeďŹnition 1 The set of  ) and their free variables, are deďŹned as follows.  1. If  is an -ary relation symbol and       are  variables, then         is a formula with        as its free variable occurences.    2. if  Âż  is a formula, then  ,  ,  ,  , , ,  are formulas. Free variable occurences are those  of  3. If    and  those of  are formulas, then   ,    and  Free variable occurences are  together with those of .   are formulas.  First-order (non-temporal) structures corresponding to   . Ineach point of time will be denoted  tuitively, the interpretations of   -formulae are sequences of ďŹrst-order structures, or states of , such as        An assignment in  is a function from the set of  individual variables to . Thus we assume that (individ-    ual) variables of   are rigid, that is assignments do  not depend on the state in which variables are evaluated. In  contrast, as follows from DeďŹnition 2 the constants are assumed to be non-rigid (ďŹexible), that is their interpretations  depend on moments of time (states). For a constant  we  call element   of  also a designation of  at the moment . The assignment is extended to the assignment          of all terms in the usual way:        2. For a constant ,    1. For a variable ,    ;         .  If  is a predicate symbol then  Ă   (or simply  if  is understood) is the interpretation of  in the state  .    (or simply    DeďŹnition 3 The truth-relation  , if  is understood ) in the structure  for the assignment is deďŹned inductively in the usual way under the  following semantics of temporal operators:    iff      is a variable, and  is a term, then    those of , except for occurences of , together with   if it is a variable.      iff there is    such that          iff    A formula is called a sentence iff it does not have free  variable occurences.  Formulae of   are interpreted in ďŹrst-order temporal models with the time ďŹow isomorphic to the structure     , where  is the set of natural numbers, is  usual order relation on  , and  is a successor operation  on  .  iff      ;      iff there is     4. If  is a formula,     is a formula. Free variable occurences are  DeďŹnition 2 A model is a structure  is an interpretation mapping that assigns:   to each constant symbol some function from  to  ;   to each -ary relation symbol some function  from  to  (the power set of  )  3.      is the constant function assigning the equality  relation on  to every moment of time from  .  iff         iff     on all variables except  ;  for all   ;   such that    for all   For the case of abstraction we have:     where:  1.  is a non-empty set, the domain;  2.    ;      ;  .  , where Âź coincide with  and Âź        Âź        A formula is said to be satisďŹable if there is a ďŹrstorder structure and an assignment such that    .  If    for every structure  and for all assignments  then is said to be valid. Note that formulae here are  interpreted in the initial state  .  We conclude this section by introducing an useful nota  and constant  denote by  tion. Given a model   the set of elements of  visited by  up to the moment ,       . Then  Âž   that is   is the set of elements of  visited by  in the model .    Proceedings of the 12th International Symposium on Temporal Representation and Reasoning (TIMEâ05)  1530-1311/05 $20.00 ÂŠ 2005 IEEE  3 Properties expressible in ĂĂ Ă  Despite being very restricted fragment of the ďŹrst-order  temporal logic the logic   can express many non-trivial properties of its models. Because of the interpretation given to ďŹexible constants (by a  function from  to ) they can be though of as the pebbles  moving over elements of the domain as the time goes by.  Then, even in the absence of any other predicate symbols  except equality, one can express dynamic properties of the  system of pebbles evolving in time:     Âž     . The con  stant d has different designations (the pebble d occupies different positions) at the current and at any future  moment of time.               . The constants  a and b have the same designation now. (The pebbles  are on the same place now).             .  The constant a has the same designation as d had in  the past.             . The  constant  has the same designation at the current and  next moments of time.      Âž     The pebble a always return to the     .  place it occupies at any given moment of time.     Next, we present two examples of more complex formulae, which will play special role later on:                                                         Both formulae express the same fact about the behaviour of  pebbles and : the pebble moves in the next moment of  time to the position to which the pebble  has moved from  the position which is occupying now. In other words  moves in the same way as  did from the same position. The  difference between two formulae is that NextNew1 does not  but at the expense of an additional  use âlastâ operator  ďŹexible constant.  In the above formulae no predicate symbols except  equality was used. One example of the formula with additional binary predicate ! is       !       !     !          This formula says that predicate ! , restricted to the pairs  of elements of domain, visited by ďŹrst and second constant,  respectively, is rigid. But ! may well have different interpretations at different moments of times on all other pairs  of elements. This example illustrates also the pebble localformulae. Pebble  ity of properties expressible by   locality of the property means the property depends only on  the interpretations of predicate symbols on the elements of  the domains ever visited by pebbles. It is easy to show that  .  only such properties are expressible in   3.1 Pebble systems and agents using resources  The above metaphor of pebble system may also be  seen as the very abstract model of computational processes  (agents) using some resources. In such a model a pebble, or,  indeed non-rigid constant  may be thought of as an computational process and elements of the domain as the abstract  resources. Then, if at some moment of time a designation  of  is an element  of the domain, one may understand it  as â uses the resource â. To model the situation with processes, or agents using several resources at the same time,  one may associate with an agent a set of ďŹexible constants  (pebbles). Another natural reading of the above situation  may be âthe mobile agent  resides at the host â. Taking  this point, the formulae of   can be used to specify protocols, policies or requirements for agents operating  within the common pool of resources. Pointing out this possibility, we restrict ourselves in this paper with the simple  example of communicating protocol for mobile agents.  3.2 An example of communication protocol for  Mobile Agents  Let us suppose the following scenario where a group  of communicating mobile agents explore some hosts and  transmit messages to each other. Because mobile agents can  move autonomously from host to host, they cannot reliably  know the location of their communication peer. Therefore,  a practical communication protocol somehow must keep  track of agent locations, allowing each agent to send messages to its peers without knowing where they physically  reside.  There are many mobile agent tracking protocols, that use  a forwarding pointers mechanism[1]. It means that each  host on mobile agents migration path keeps a forwarding  pointer to the next host on the path. The classical primitive  for such protocol is based on knowledge of each sender the  target agentâs home. So messages are sent to the agentâs  home and forwarded to the target object along the forwarding pointers. Interesting alternative is a primitive ďŹnd a  Proceedings of the 12th International Symposium on Temporal Representation and Reasoning (TIMEâ05)  1530-1311/05 $20.00 ÂŠ 2005 IEEE  TIME  b  a  H  O  S  T  S  b  a  b  a  b  a  Figure 1. A mobile agent tracking protocols:  the operation of sending message from agent  to agent .  host, which was visited both by sender and receiver2 . Using  this primitive the messages are again forwarded to the target object along the forwarding pointers but from the host  where the mobile agents migration paths intersect (see Figure 1).  as  We can specify the use of this primitive in    follows. For simplicity we assume that receiver always either do not move or move to the new host (never revisiting  the hosts it already visited).  Let ďŹexible constants  and  denote communicating mobile agents (sender and receiver, respectively) and  denotes the message. Then   -formula                   4 Minsky machines and their modelling by  pebbled sets  In this section we use a well known model of Minsky  machine to show universality of pebbled sets model. Informally speaking, Minsky machine is a two counter machine  that can increment and decrement counters by one and test  them for zero. It is known that Minsky machines represents  a universal model of computations [6]. Being of very simple  structure the Minsky machine are very useful for proving  undecidability results (see for example [4, 5]).  It is convenient to represent a counter machine as a simple imperative program  consisting of a sequence of instructions labelled by natural numbers from  to some .  Any instruction is one of the following forms:  : ADD  to  ; GOTO Âź ;  : IF     THEN SUBTRACT  FROM   ELSE GOTO  ;  ; GOTO Âź  ÂźÂź  : STOP.              describes the above protocol: at some moment of time message  is on the same hosts as , then it moves along the  path of , starting from a host which both  and  have visited (and  done it no later than ).  It should be clear now, that   is expressive enough  to formulate also the correctness conditions for such protocols, like once the message sent, it will be delivered eventually to a receiver. Of course, one needs to specify some  extra conditions which would guarantee correctness: receiver must stop and wait in order to receive a message  (otherwise the message may always be behind the receiver).  Or, one may specify the different speed of messages and  agents, which would guarantee delivery even to the agents  âon moveâ. One way of doing this in   is to specify  that messages can move to the new host every round (discrete moment of time), while mobile agents can move only  every second round. Thus, the proof of correctness of the  above protocol may be reduced to the validity checking for  2 We donât  some    -formulae. We donât pursue a goal of automatic veriďŹcation of protocols via validity checking (theorem proving) for   -formulae in this paper, but rather  demonstrate a related negative result on   itself: it is  highly undecidable and, therefore, fully automated veriďŹcation based on validity checking of   -formulae is not  possible.  consider the issue of implementation of such a primitive and  note that this can be done in various ways.  where     and  Âź ÂźÂź    .  The machine  starts executing with some initial nonnegative integer values in counters  and  and the control at instruction labelled . We assume the semantics of  all above instructions and of entire program is clear. Without loss of generality one can suppose that every machine  contains exactly one instruction of the form : STOP which  is the last one (  ). It should be clear that the execution process (run) is deterministic and has no failure. Any  such process is either ďŹnished by the execution of : STOP  instruction or lasts forever.  As a consequence of the universality of such computational model the halting problem for Minsky machines is  undecidable:  Theorem 1 ([6]) It is undecidable whether a two-counter  Minsky machine halts when both counters initially contain  .  We will use the following consequence of Theorem 1.  Corollary 1 The set of all Minsky machines which begin  with both counters containing  and do not halt is not recursively enumerable.  Proceedings of the 12th International Symposium on Temporal Representation and Reasoning (TIMEâ05)  1530-1311/05 $20.00 ÂŠ 2005 IEEE  TIME  TIME  d  d  d  da  b  b  a  a  a  a  a  b  b  a  b  d  a  d  b  d  b  da  b  b  b  a  a  a  a  b  a  b  a  b  a  b  b  b  Counter=0 Counter=1 Counter=2 Counter=1 Counter=2 Counter=1 Counter=0  Figure 3. Pebbels  and moves in the same  way as did from the same position.  Figure 2. Counters encoding    Given any machine  (with initial values for the two counters) let us deďŹne its run  as a sequence of triples, or  states of  :                              where  is the label of the instruction to be executed at  th  step of computation,  and  are the nonnegative integers within the ďŹrst and the second counters, respectively,  after completion of  th step of computation. Depending on  stops or not  can be ďŹnite or inďŹnite.  whether  Henceforth we will consider only the computations of  the Minsky machines started with both counters containing  . Thus we always put   ,      and   .    4.1 Modelling Minsky machines by systems of  pebbles  We will show our main result on non-r.e. axiomatizability of   by modelling the computations of two  counter Minsky machines in that logic. In fact we are going to model such machines by pebble systems and then just  express required properties of such systems in the logic. In  this subsection we explain the main idea of modelling, leaving all details of   representation to the next section.  Given a pebble system with tree pebbles , , . We  denote the set of all elements that was visited by a pebble   ( ) until the moment of time by  (  ). One may use  then two pebbles, say  and to model the counterâs values  as follows. We represent the counterâs value at the moment    as the cardinality of the set    . Increasing one of the  sets of elements visited by , or by one may increase or  decrease the counter value. Our modelling will ensure that        . That means the counterâs value at the moment      is in fact         (see Figure 2).  Due to peculiarities of logical representation we conďŹne  the range of the elements visited by both pebbles to the set  of elements visited by another special pebble . We require  moves every time to the new element and we have         .  Let us show how to increase and decrease the cardinal  generates unique  ity of the set    . Since the pebble               sequence of elements from the domain as the time goes by  we can use this unique sequence for increasing of the cardinality of  or  by one.  Let pebble  ( ) is on an element  of the domain. Since   is moving strictly along the path of , the pebble has  visited the element  and moved to another element  . So  in order to increase the cardinality of  (  ) by one we  need to move the pebble  ( ) to the element  . In other  words  ( ) moves in the same way as did from the same  position.  We can increase (decrease) the value of counter by one  or in other words increase (decrease) the cardinality of the    set      by one if we increase the cardinality of      the set  (  ) by one according to the above procedure.  Since there is a strict order of unique elements that we use  for moving pebbles along the path of we can easily test  the emptiness of the counter or emptiness of the set  by  checking if the pebble  and the pebble are on the same  element (see Figure 3).    5 Modelling of Minsky machines in ĂĂ Ă  In the translation of Minsky machines into formulae of    we will use the formulae deďŹned in the Section 3  and counters encoding method from the previous section.  5.1 Translation  Given a Minsky machine  deďŹned by the sequence of  instructions      we deďŹne   temporal formula   as follows.  Let        be ďŹexible constants corresponding to instructions       . Let  and  be two additional constants. The intention is to model the fact â  is executed at  the moment tâ by coincidence of designations of  and  at  the moment . We denote by  the formula expressing this  fact:        . Since we assume  is the  STOP instruction we will denote  alternatively as  .  Further we have ďŹve more constants for modelling counters:  ,  , ,  ,  .       Proceedings of the 12th International Symposium on Temporal Representation and Reasoning (TIMEâ05)  1530-1311/05 $20.00 ÂŠ 2005 IEEE     Then, for every instruction , except  : STOP, we deďŹne  its translation   as follows:  A.  An instruction of the form  in the next moment of time. Formulae B6 and B7 regulate    ).  the switching of truth values of  (  Further, let the formula  be conjunction of the following formulae:       Same    Same     Same       : ADD  to  ; GOTO Âź ;  A2.  A3.  A4.  A5.  Âž  Âž  Âž  Âž  Âž    NextNew     NoChange    NoChange      NoChange        Âź        Formulae A1âA4 ensure that in every temporal model  for them, once we have   true at a moment , at the  next moment the interpretation of the ďŹexible constant   changes to a new value, while     and   keep their  interpretation intact. The formula A5 describes switching    ) and the aim  truth values of propositions  (  here is to model the transition from the instruction which is  executed to the next one.    B.    An instruction of the form     : IF    THEN SUBTRACT  FROM  ; GOTO   ELSE GOTO  ;  is translated into the conjunction of the following formulae:   Same     B2.   Same     B3.   Same     B4.   Same     B5.   Same     NoChange     B1.  Âž  Âž  Âž  Âž  Âž  B7.  Âž  Âž    NoChange        NextNew         NoChange          NoChange          NoChange   B6.      NoChange    NoChange                                    is translated into the conjunction of the following formulae:  A1.    ÂźÂź                                        At the next moment of time  holds and         have  the same designations, while  has the different    designation.     Ă          Same    , stating  that  has different designations at different moments  of time and    all have different interpretations.  Ă    is a Minsky     where  Finally, let  be     machine deďŹned by the sequence of instructions     .  The formula    is intended to faithfully deand the following  scribe the computation of the machine  lemma provides a formal justiďŹcation for this.    produces an inďŹnite run  Lemma 1 A Minsky machine  if, and only if,      .      Proof  Let a machine  produces an inďŹnite run                 temporal structure                   , and a   is a model  of    .      Straightforward induction on steps in  shows that, for  , the following relation between states of  and  all   holds:         whenever    ;   ;   .        for all   ,  Since the run  is inďŹnite we have    and therefore    for all   . Hence,     By contraposition it is sufďŹcient to show that  if a machine  produces a ďŹnite run (halts) then        Â˝                Âž          Formulae B1âB4 ensure that, in every temporal model for  them, once we have  and the interpretations of  and   are different (meaning â -st counter has non-zero valueâ)  the interpretation of  changes in the next moment of time,  while interpretations of     and   still the same.  Formula B5 ensures that, when  and interpretations of   and  are the same (meaning âcounter  has zero valueâ)  then interpretations          should still the same     Â˝     Âž    Â˝             Â˝  Âž  Âž      Âź      Same     At the initial moment of time the constants         have the same designation.                 is satisďŹable.  Let a machine,    , halt and produce a ďŹnite run    . The ďŹnal executed in     ,   struction is the STOP instruction, so we have   .  Now, we construct a temporal structure       as follows. We let the domain  be a countable set. Then,  for all     , we ensure    whenever   ,  and    for all     . Further we set                Proceedings of the 12th International Symposium on Temporal Representation and Reasoning (TIMEâ05)  1530-1311/05 $20.00 ÂŠ 2005 IEEE        (designations of ) to be different elements of the domain  for all   .  Further, we set   Same     Same     Same      Same   , and                        .  Further deďŹne designations of        for      inductively as follows:        If the instruction with the label is of the ďŹrst form  (ADD) then deďŹne        , where   is a such moment of time that         and leave designations of the remaining constants the  same as in   .  If the instruction with label is of the second form  (SUBTRACT) and         then  deďŹne        , where  is a such  moment of time that        and leave  designations of the remaining constants the same as in    .  If the instruction with the label is of the second form  (SUBTRACT) and         then leave  designations of all constants ( ,  , k=1,2) the same  as in   .  Finally, assume designations of        to be arbitrary  for all   .             and  Theorem 3 The set of valid formulas of     is not recursively enumerable  Proof (sketch) As in the case of   we use modelling of Minsky machines computations by formulas of   . The modelling is similar to that we have done  above, so we restrict ourselves only to the demonstration  of crucial points. The main idea is to specify some moment in the future as the starting point and then model  computations step-by-step in a way very similar we have  done before but moving backward in time. Let   be a formula        , saying that the  pebble moves to the new places until it stabilizes, i.e.  satisďŹes  interpretation  of in any model of                                 . The moment  we call starting point. Then, given a Minsky machine  we deďŹne  its temporal translation as a formula    of      with the following intended property: in any model  of        with the starting point , the states       represent ďŹrst    states of the run       in the same way as           did in the proof of  Lemma 1. To this end we introduce a âbackwardâ analogue  of the        formula, that is     Âž  Theorem 2 The set of valid formulas of   is not recursively enumerable.          The new translation  of a Minsky machine  tained from  deďŹned in Section 5 replacing:    6 Future time case  We have used both past and future time modalities in  the above modelling of Minsky machines, so the nonaxiomatizability result holds for the logic with both types  of modalities. What about the case of logic with only future  time? We show in this section that the future time fragment  of   augmented with the future time operator until is  still non-recursively axiomatizable.  To get the syntax of future time temporal logic      one should omit in the DeďŹnition 1 the clauses with the past  time operators ( , , ) and add the following clause: If   and  are formulas, then     is also formula, read   until  . Semantic of until operator is deďŹned in usual way:    ##Âż#$$      #%%   "   #&  #   & "    Now from Theorem 1 and Lemma 1 our main result follows:      !"     "  It is easily seen that this overall construction provides a  and since    one also has  model for      . Thus,     is satisďŹed in .    iff  there is   such that     for every           is ob-  each formula of the form      where  is not of the form       and is not    of the form  with the formula        ;  each formula of the form  formula            with the    ; and  each formula of the form             with the formula   !"     "       As an example, the formula B2 (Subsection 5.1)  should be replaced with         !"      "     .  Further, the formula  be the conjunction of the following formulae (it is appropriate modiďŹcation of  ):  Proceedings of the 12th International Symposium on Temporal Representation and Reasoning (TIMEâ05)  1530-1311/05 $20.00 ÂŠ 2005 IEEE       Same     Same     Same      Same                                      Ă  Same          3.  4.                   The proof of the lemma is similar to that of Lemma 1.  One should take into account, though, the opposite direction  in time used for modelling computations.  By contraposition we have from Lemma 2, that  produces an inďŹnite run, if and only if,          is valid formula. The statement of theorem follows  immediately Âž.          7 Encoding of a tiling problem  One of the anonymous referees of this paper has suggested an alternative proof of non-recursive axiomatizabil  which does not require equality. The idea is to  ity of  reduce well-known recurrent tiling problem[3] to the sat  isďŹability problem for  . However, this proof uses  stronger assumption on the vocabulary of the logic. It establishes the result for the logic in the vocabulary with countably many unary predicates. Here it goes.  Let be a ďŹnite set of square tiles. Every side of each tile   has a colour, namely        . Let   be a distinguished tile. A recurrent tiling of   is  a map      such that    for inďŹnitely  many , and for all    we have         .     and  It is known that the problem of whether there exists a re is   current tiling of a given   -hard (so, certainly not  recursively enumerable).       For a given  , let             .   and      Consider the following formulas with only  Âž , a ďŹexible constant , and a unary relation symbol for each  .         1.  2.                                                Âž Âž  Âž Âž         Âź                 Âż                     Âź    Âž              (vertical colours along  -axis match)  Âž    (unique tile everywhere)         (horizontal colours match)    Âź            (remaining vertical colours match)  5.  Lemma 2 A Minsky machine  produces a ďŹnite run and  stops by execution of   instruction if, and only if,          is  satisďŹable  formula, i.e. there       is a model  of      such that                      Âź      Now we have an analogue of Lemma 1:    Âž  ÂžÂż    (recurrent)         Suppose there is a recurrent tiling of  . For    write  for  . Take the domain  of a model  to be , and deďŹne     . For each   and   we deďŹne    iff   and    . So       iff   . Now it is easy to check that all  of the above formulas are true at time 0.  Conversely, assume that the formulas all hold at time 0  in some model. For each    let     . For  each   , deďŹne     to be the unique tile    such  that          .  This is well-deďŹned        by formula 1. Now it is straightforward to check that is a  .  recurrent tiling of   has a recurrent  So, the formulas are satisďŹable iff  tiling. That gives a proof of the following theorem:                                                       Theorem 4 Let  be an alphabet including countably  many unary predicate symbols. The set of valid formulas    of  in the alphabet , without equality and Until operator, is not recursively axiomatizable.    8 Conclusion    We have considered the extension   of classical  propositional temporal logic  and shown that the logic  is suitable for speciďŹcations of dynamic systems using some  resources, such as processes using memory locations or mobile agents occupying some sites. Despite its simplicity   proved to be not recursively axiomatizable, even  when restricted to the future time fragment and to the fragment without equality, but with countably many unary predicates. The results indicate that fully automated veriďŹcation of   speciďŹcations via validity checking (theorem proving) is not, in general, possible. IdentiďŹcation of  decidable fragments of   (if any) is an interesting  problem for further research. We leave the investigation of   with restrictions on the number of predicates and  ďŹexible constants to the future work. Another interesting  route towards veriďŹcation is the design of efďŹcient model  checking procedures for   and its fragments.  Acknowledgements. We would like to thank anonymous  referees for their helpful suggestions. Special thanks to the  referee who has proposed Theorem 4 and its proof.            Proceedings of the 12th International Symposium on Temporal Representation and Reasoning (TIMEâ05)  1530-1311/05 $20.00 ÂŠ 2005 IEEE    References  [1] J. Cao, X. Feng, J. Lu, and S. K. Das. Mailbox-based  scheme for mobile agent communications. IEEE Computer,  35(9):54â60, 2002.  [2] M. Fitting. Modal logic between propositional and ďŹrst order.  Journal of Logic and Computation, 12:1017â1026, 2002.  [3] D. Harel. Effective transformations on inďŹnite trees, with  applications to high undecidability, dominoes, and fairness.  Journal of the ACM, 33:224â248, 1986.  [4] H. Huttel. Undecidable equivalence for basic parallel processes. In Proceedings of TACS-94, Lecture Notes in Computer Scinece 789, pages 454â464. Springer-Verlag, 1994.  [5] G. Kucherov and M. Rusinowitch. Undecidability of ground  reducibility for word rewriting systems with variables. Information Processing Letters, 53:209â215, 1995.  [6] M. Minsky. Computation: Finite and InďŹnite Machines.  Prentice-Hall International, 1967.  [7] T.Ball, B.Cook, Das, and S. Rajamani. ReďŹning approximations in software predicate abstraction. In Proceedings of  Tools and Algorithms for the Construction and Analysis of  Systems (TACAS), pages 388â403. Springer-Verlag, 2004.  Proceedings of the 12th International Symposium on Temporal Representation and Reasoning (TIMEâ05)  1530-1311/05 $20.00 ÂŠ 2005 IEEE 