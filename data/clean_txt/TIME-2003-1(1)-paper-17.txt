Reasoning about Extremal Properties of Events  Jatindra Kumar Deka  Department of Computer Science and Engineering  Indian Institute of Technology Guwahati, INDIA 781039  jatin@iitg.ernet.in  Abstract  This paper deals with a branching time temporal query  language called Min-max CTL which is similar in syntax  to the popular temporal logic, CTL [7]. Min-max CTL can  express timing queries on a timed model, whereas CTL is  used for untimed systems. Interesting timing queries involving a combination of min and max can be expressed  in Min-max CTL. While model checking using most timed  temporal logics is PSPACE complete or harder [3, 2], it is  shown in [10] that many practical timing queries, where we  are interested in the worst case or best case timings, can be  answered in polynomial time by querying the system using  Min-max CTL. In this paper the syntax of Min-max CTL is  extended to increase the expressive power of Min-max CTL.  1 Introduction  Temporal logic model-checking [7] is one of the most  popular and well studied paradigms for formal veriƒè≈π¬Åcation  of hardware and other concurrent systems [8]. In this approach, each concurrent process is modeled as a ƒè≈π¬Ånite state  non-deterministic transition system. The correctness property which needs to be veriƒè≈π¬Åed on the given set of concurrent transition systems is speciƒè≈π¬Åed as a temporal logic formula. Model checking has been extensively studied for two  broad categories of temporal logics, namely linear time temporal logic and branching time temporal logic [5, 8].  Traditional temporal logics such as Linear Temporal  Logic (LTL), Computation Tree Logic (CTL), and CTL [7]  can be used to reason about the temporal behavior of systems without explicitly quantifying time. These logics are  therefore inadequate to quantitatively reason about timing  properties of a system. On the other hand timed temporal logics such as Timed CTL (TCTL) [3] and Real Time  CTL (RTCTL) [11] allow us to verify actual timing properties on a timed transition system. However, the veriƒè≈π¬Åcation of timed temporal logics has been found to be much  more complex than their untimed counterparts [1]. For example, while LTL model checking is PSPACE complete,  TLTL model checking is undecidable [4]. The problem  is less severe in the case of branching time timed logics,  where TCTL model checking is PSPACE complete [3, 2]  (where as CTL model checking is possible in polynomial  time). It has been shown in [2] that TCTL model checking  is PSPACE complete even in discrete-time models.  While analyzing timed transition systems, we often like  to reason about the extremal (best case or worst case) temporal properties of the system. Determining such temporal  properties can also be used as a strategy for veriƒè≈π¬Åcation [6].  In [10], we proposed a temporal query language called Minmax CTL which allows the quantiƒè≈π¬Åcation of CTL state and  path properties in terms of a cost function over real time.  Min-max CTL is capable of expressing queries which involve a combination of extremal (min and max) quantiƒè≈π¬Åers  both along paths (or walks) in the timed model, as well as  across paths. For example, given the air, rail and road maps  of a country represented as graphs with the cities as vertices  and links labeled with the duration of travel, we can express  queries such as the following:  What is the minimum time to travel from city ƒÇ¬ó  to city ƒÇ¬û , when we travel solely by rail or road?  What is the minimum total time to travel from city  ƒÇ¬ó to city ƒÇ¬û , when we travel as far as possible by  air, and then go by rail or road?  It is also possible to express complex queries like,  Determine the minimum among the worst-case response times for the earliest request along all  possible computation paths of a client process,  where the worst-case response time for a request  of a client is deƒè≈π¬Åned as the maximum delay by  which the grant is given by the server. Here request and grant are treated as events.  Figure 1 shows a sample timed model for the query presented above related to Client-Server, where the answer to  Proceedings of the 10th International Symposium on Temporal Representation and Reasoning and  Fourth International Conference on Temporal Logic (TIME-ICTL√¢¬Ä¬ô03) 1530-1311/03 $17.00 √Ç≈† 2003 IEEE  s  4  req  a  3  gr  2  2  gr  1  9  req  req  2  3  b  2  gr  1  gr  req  1  gr  req  c  6  gr  2  gr  Figure 1. Sample Timed model: Client-Server  this query is , since the worst-case response time of the  requests at states , , and , are , , and  respectively.  We introduced the Min-max CTL in [10]. We showed  in [10] that a category of Min-max CTL (which covers  many practical min-max timing queries of interest) can be  evaluated in polynomial time though the general problem is  DP-hard.  In this paper we describe three extensions of Min-max  CTL, which are the main contribution of this paper. The  main features of these extensions may be summarized as  follows:  In the basic syntax of Min-max CTL we have not considered the conjunction and disjunction of Min-max  CTL formulas, since the semantics of evaluation does  not naturally match with the semantics of the CTL  restrictions of such formulas. In this paper we address this issue and show that a non-ambiguous semantics can be deƒè≈π¬Åned with proper restrictions on the cost  function.  The syntax of Min-max CTL in the basic formulation  does not permit a Min-max CTL formula before the  until operator. That is, in all formulas of the form     ,  can only be a CTL formula. In this paper  we present an interesting extension which allows us to  quantify the values evaluated along the path when   is also a Min-max CTL formula.  We also present an extension of Min-max CTL  which allows the normal CTL until operator  within a quantiƒè≈π¬Åed Min-max CTL formula.  For example, we allow formulas of the type           , which is  not expressible in the Min-max CTL introduced  in [10].  This paper is organized as follows. In Section 2 we provide a brief introduction of basic Min-max CTL. The basic  syntax of Min-max CTL is extended to allow conjunction  and disjunction of Min-max CTL formulas in Section 3.  Section 4 presents the extension which allows us to quantify the values evaluated along the path when a Min-max  CTL formula is used before an until operator. Section 5  presents an extension of Min-max CTL which allows the  normal CTL until operator within a quantiƒè≈π¬Åed Min-max  CTL formula. Section 6 provides an outline of the algorithm to evaluate the queries of extended Min-max CTL.  Section 7 presents the conclusions of this paper.  2 Min-max CTL  The syntax of Min-max CTL is similar to that of CTL,  except for two special types of until operators, which are  called min-until () and max-until ( ) respectively,  and two special types of existential (E) and universal (A)  quantiƒè≈π¬Åers, which (like CTL) must immediately precede  each min-until and max-until path formula. These special  or  operators across paths. Genquantiƒè≈π¬Åers act as  erally the next-time (X) operator of CTL is excluded in case  of timed models.  2.1 Syntax  In this section we describe the model and the formal syntax of Min-max CTL.  Deƒè≈π¬Ånition 2.1 [Timed Model: ]  A timed model is a tuple        , where:   is the set of atomic propositions,   is the ƒè≈π¬Ånite set of states,      is a transition relation, where  denotes the set of positive integers, and         implies that the delay between successive states   and  is  units of time,     is the initial state,   is a labeling of states with atomic propo   sitions true in that state.  The syntax of Min-max CTL is as follows.  denotes  boolean formulas over the set of atomic propositions    ,  denotes CTL formulas, and  denotes Min-max  CTL formulas.  and   are user deƒè≈π¬Åned functions.                                                      √Ç≈∫        √Ç≈∫     Proceedings of the 10th International Symposium on Temporal Representation and Reasoning and  Fourth International Conference on Temporal Logic (TIME-ICTL√¢¬Ä¬ô03) 1530-1311/03 $17.00 √Ç≈† 2003 IEEE      p  We use the following abbreviations:  :       :       :      p    √Ç≈ª The CTL restriction of the Min-max CTL formula             is       .             a  b  c        Min-max CTL evaluation returns a numeric Min-max value  corresponding to the Min-max CTL formula at states where  the CTL restriction of the formula is true. The semantics  of Min-max CTL and the algorithm to evaluate the value of  Min-max queries are presented in [10]. It is also shown that  in general the problem is DP-hard, but there are important  special cases which cover most of the practical queries of  interest and can be evaluated in polynomial time. This category is termed as monotonic Min-max CTL, where the cost  function is monotonic in nature.  We illustrate the semantics of evaluation through an  example, the formal deƒè≈π¬Ånition of semantics is presented  in [10].  √Ç≈ª Figure 2 shows a sample timed model. Suppose we  are interested in determining the earliest occurrence  of a state where  is true, starting from state . We    can pose this query as    to be evaluated  at state . Using the   operator indicates that we       3  r  d  5  3  1  4  2  √Ç≈ª The CTL restriction of the Min-max CTL formula      is  .    p,q  2  Throughout this paper,  -formulas,  -formulas and formulas refer to formulas derived out of  ,  and respectively.  In traditional CTL model checking we seek to determine  whether a given CTL formula (of the form of  ) is true at  a state of the model. In Min-max CTL, we have extended  the syntax of CTL by allowing the quantiƒè≈π¬Åed until operaand   path quantitors (  and   ) and the  ƒè≈π¬Åers, which are deƒè≈π¬Åned over the cost functions  or  √Ç≈∫ .  Thereby Min-max CTL also has a semantics of evaluation  which returns a numeric value whenever the formula is true  at a state. This numeric value quantiƒè≈π¬Åes the value of the objective function  (or  √Ç≈∫ ) which we seek to optimize, and  is the answer to the Min-max CTL query at that state. On  the other hand, if the formula is false at a state of the model,  then the evaluation of the formula at that state returns null.  A Min-max CTL formula is said to be true at a state when  the CTL restriction of the Min-max CTL formula is true at  that state. This restriction is obtained by removing the functions  ,  √Ç≈∫ and the quantiƒè≈π¬Åers  and √Ç≈∫ from the Min-max  CTL formula. We present a couple of examples to illustrate  the CTL restriction of a Min-max CTL formula:    p,q  2  2  e  q  p  f  3  r  Figure 2. A timed model  are interested in the earliest occurrence of  along the  path. Hence the path formula    evaluates to  on all paths through state . This value is the delay  to reach state  from state . We refer to the state   as the closing state of these paths. Similarly, for all  paths which go through state  and not through state  , the path formula   evaluates to , and  is the  closing state. The delay from the start state of the path  to the closing state is called the  -value of the path.   speciƒè≈π¬Åes that the path with minThe quantiƒè≈π¬Åer  imum  -value has to be chosen, which in this case is  any path through state . Hence the Min-max CTL formula      evaluates to at state .                     √Ç≈ª Consider the query      . This query differs from the previous one only in the cost function,  which is  instead of  . The best path is still the same,  but the value returned at state is now .  √Ç≈ª Using the   operator, we can determine the latest  occurrence of  along a path. For example, in Figure 2, evaluating the formula      at state  yields and the best path is the one through state   followed by state . State  is the closing state of the  path.         .  Here         . The   is the Min-max  √Ç≈ª Consider the Min-max CTL formula             we use the cost function        -value of a  state with respect to  value computed at that state for the subformula         . Since we use  , the  possible closing states for the path formula      are  (for all paths through ) and  (for all paths  through  which do not go through ). Evaluation  at state  and   at state  of  yields   . Thus for all paths where  is the closing state,         , and for all paths where  is  the closing state,        . Since the  path quantiƒè≈π¬Åer is    , the value returned by  evaluating  at state is .                     Thus the numeric values returned by the evaluation of a  Min-max CTL formula  at states of the timed model are  determined by the values (namely -values) returned by  Proceedings of the 10th International Symposium on Temporal Representation and Reasoning and  Fourth International Conference on Temporal Logic (TIME-ICTL√¢¬Ä¬ô03) 1530-1311/03 $17.00 √Ç≈† 2003 IEEE  evaluating the subformulas of at the states of the model  and the lengths (namely  -values) computed by evaluating  the special until operator  (which may be   or   )  over the paths of the model. The objective function may  have two parameters, namely  and . The  -value is associated with the path cost computed by virtue of the   operator, and the -value is associated with evaluating the  subformula following the  operator. The user deƒè≈π¬Åned  objective functions  and  √Ç≈∫ compute the merits of paths  as a function of the  -values and -values, and the  and   path quantiƒè≈π¬Åers speciƒè≈π¬Åes the criterion for choosing between values returned by evaluating these paths.  3 Conjunction and Disjunction in Min-max  CTL  delay to reach a terminal state through a path consisting of  either control states or observable states. This may be expressed in Min-max CTL as follows:                 In Figure 3 this query evaluates to at the state  , and corresponds to the path        . Now suppose we are interested in determining the minimum delay to reach a terminal state through a path consisting of solely control states or  solely observable states. This property cannot be expressed  in the basic syntax of Min-max CTL in a single query. We  can however, extend Min-max CTL to specify this property  as follows:                             Min-max CTL evaluation may be extended to the conjunction and disjunction of Min-max CTL subformulas in  many ways. In this section we highlight the main issues  and present one such extension of Min-max CTL for conjunction and disjunction.  The basic semantics of the proposed extension is to combine the values evaluated by Min-max CTL subformulas,   and  to obtain the value evaluated by    or    .  The combined cost function can be deƒè≈π¬Åned in many ways,  but must consider the cases where the CTL restriction of  either  or  is not true at the state, in which case the  value evaluated by that subformula will be  . We suggest  one possible way of choosing such an evaluation semantics  which is motivated by the following example.  The operator   computes the minimum of the values  evaluated by its two operands. If both of them is  ,  then it returns   since the CTL restriction of  does  not hold. If one of them is  , then the CTL restriction of  holds, and hence the value evaluated by the other  operand is returned. In this example, the value returned by     at  is , and corresponds to the path         . The value returned by      at   is , and corresponds to the path        . Thereby the  value evaluated for  at  is .  Now, consider the Min-max CTL formulas:  Example 3.1 Consider the timed model in Figure 3. The  states labeled are terminal states, the states labeled are  control states, and the states labeled  are observable states.  The delays are shown on the edges.  The CTL restriction of  does not hold at  , while the  CTL restriction of  holds at  . Since the CTL restriction  of    does not hold at  , the evaluation of the formula      at  will return  . On the other hand, the  CTL restriction of   holds at  , and the evaluation of      will evaluate to (which is the value obtained  by evaluating  at  ).  s0 c,o  2  1  s1 c  1  o  5  2  1  o s4  s3  6  t  s2  1  t0  1  4                                             semanticsof evaluation for the operators   The    ,     and  are as follows:              c,o  3  s5         c  3  t1 t  1  Figure 3. Timed model √¢¬Ä¬ì 1                 Suppose we are interested in determining the minimum  Proceedings of the 10th International Symposium on Temporal Representation and Reasoning and  Fourth International Conference on Temporal Logic (TIME-ICTL√¢¬Ä¬ô03) 1530-1311/03 $17.00 √Ç≈† 2003 IEEE    if EvalS( ,s) is   EvalS(  ,s) is    ,  or                  if EvalS( ,s) is   EvalS(  ,s) is   or                                 if EvalS( ,s) is  and  EvalS( ,s) is        if EvalS( ,s) is        if EvalS( ,s) is                if EvalS( ,s) is  and  EvalS( ,s) is             if EvalS( ,s) is       if EvalS( ,s) is                   if EvalS( ,s) is  and  EvalS( ,s) is   The cost function  has to be deƒè≈π¬Åned properly so that it can  evaluate the value.  In the basic formulation of Min-max CTL, we had not allowed the disjunction of a CTL subformula,  , with a Minmax CTL subformula, . This restriction was imposed to  avoid a situation where the CTL restriction of    holds  due to only  holding at that state. In such a situation evaluation of the Min-max CTL formula    at a state could return  even though its CTL restriction holds at that state.  Deƒè≈π¬Åning the semantics on the lines shown in this section,  we can extend Min-max CTL to allow disjunctions of CTL  and Min-max CTL subformulas.       if EvalS( ,s) is       if EvalS( ,s) is            4 Quantifying Min-max CTL over paths      In the syntax of the basic Min-max CTL, formulas of the  The function    is used to denote the value evalform     are restricted to cases where  is a CTL  uated by the Min-max CTL state formula,  , on a state, ,  formula. In a path where     is true, we may have  of the timed model. It is easy to see that this extension to  multiple states where  is true. In this section we show that  Min-max CTL does not lead to any increase in its evaluation  if we allow  to be a Min-max CTL formula, and quantify  complexity. The Algorithm, that is presented in [10], evalu(again through  or ) the values evaluated on the  ates the value of a Min-max formula after getting the value  states labeled  preceding  on the path, then the expresof its all subformulas. Because of this evaluating style, the  complexity of the algorithm for this extension remains the  same. There are several ways in which similar extensions  may be done. For example, additive costs structures similar to AND/OR graphs [12] can be modeled using addition  of     and    , instead of using  or  . We have suggested a  or  extension in keeping with the basic style of Min-max CTL.  In the more general case, we may deƒè≈π¬Åne the semantics  of evaluation for the operators  √ÇÀù √Ç≈æ  and  √ÇÀù √Ç≈æ  as  follows:  Example 4.1 Consider the timed model in Figure 4. The  states labeled are terminal states, the states labeled  are  control states, and the states labeled  are observable states.  The delays are shown on the edges.  In Figure 4 there are two paths from  to terminal  states through control states only. These are        and       respectively. Now suppose we are interested in choosing the path which is close to observable  states. Let  denote the minimum delay from state   to any observable state. Let   denote the maximum dis  tance of path  from observable states, which is deƒè≈π¬Åned as      . We are interested in the path, , from   if EvalS( ,s) is  or  to a terminal state (through control states), for which   is  minimum, that is, the path for which the maximum distance  EvalS( ,s) is   observable states is minimized. This query cannot be ex         to  pressed in the basic version of Min-max CTL. We propose      to extend Min-max CTL to express this property as follows:            √ÇÀù √Ç≈æ   √ÇÀù √Ç≈æ           sive power of Min-max CTL can be signiƒè≈π¬Åcantly enhanced.                   Proceedings of the 10th International Symposium on Temporal Representation and Reasoning and  Fourth International Conference on Temporal Logic (TIME-ICTL√¢¬Ä¬ô03) 1530-1311/03 $17.00 √Ç≈† 2003 IEEE  4.1 Syntax and Semantics  s0 c  2  1  s1 c  10  o,c  2  s3  1  t  s2  1  t0  1  1  2  2  9  o s4  s5  1  The formal syntax of this extension of Min-max CTL  is as follows.  denotes the set of boolean formulas over  the set of atomic propositions    ,  denotes CTL  formulas, and  denotes Min-max CTL formulas.  and   √Ç≈∫ are user deƒè≈π¬Åned functions.  c          c  1  t1 t  1  Evaluating     at the states  ,  and   returns , and respectively. Thereby, on the      evalupath        ,  ates to      . Similarly, on the path         ,      evaluates to      . The   quantiƒè≈π¬Åer requires  us to choose the path with minimum . Hence the path         is the desired path having a cost of .  In a similar way if we are interested in determining a path  from  to a terminal state through control states for which  the minimum distance to observable states is minimized, we  can write this as:                      The value for the paths        and         are now and respectively. Hence the desired path is         having a cost of .  If we wish to determine a path from  to a terminal state  through control states for which the minimum distance to  observable states is maximized, we may write:                                                                                         √Ç≈∫  √Ç≈∫  Figure 4. Timed model √¢¬Ä¬ì 2                                                                              For this query the desired path is        having a cost  of .  In the extension described in this Section, we introduce  path formulas of the form √Ç≈∫√Ç≈∫  √Ç≈∫  , where √Ç≈∫√Ç≈∫ and  √Ç≈∫  are  or . The semantics of evaluating such a  formula over a path  which satisƒè≈π¬Åes the CTL restriction of  this formula is as follows. Consider the values returned by  evaluating  on the states in  preceding the closing state  (that is, the state where  is true). We deƒè≈π¬Åne a quantity  (just as we deƒè≈π¬Åned  and  for Min-max CTL evaluation),  which denotes the minimum or maximum (depending on  √Ç≈∫√Ç≈∫  ) of these values. The cost function is now a function of  ,  and .  √Ç≈∫  √Ç≈∫  Each Min-max CTL state formula has an embedded cost  function  . In the basic formulation of Min-max CTL, the  cost function had at most two parameters, namely  which  represented the path cost, and  which represented the cost  evaluated at the closing state of the path. In this extension,  the cost function  may have (in addition to  and ) another parameter namely . For a path formula of the form  √Ç≈∫√Ç≈∫   √Ç≈∫  , the parameter evaluates to the minimum  (if √Ç≈∫√Ç≈∫ is ) or maximum (if √Ç≈∫√Ç≈∫ is ) of the values returned by evaluating  on the states preceding the closing  state of a satisfying path.  We use the function,    to denote the value  evaluated by the Min-max CTL state formula, , on a state,  , of the timed model. As described earlier, each Min-max  CTL state formula has an embedded cost function,  , which  is a function of the  -value of a path, the -value of the  closing state of the path and the -value of the path.  We use the function,     to denote the value  evaluated by the Min-max CTL path formula, , on a path,  , of the timed model, with respect to the cost function,   . Since each until in a Min-max CTL formula must be  immediately preceded by an  or , the cost function  is  always well deƒè≈π¬Åned for each path sub-formula.  The evaluation,     , of an extended Minmax CTL path formula, , on a path,  , with respect to  a cost function,  , is deƒè≈π¬Åned as follows. Whenever    ,  returns . Otherwise, we have the following  cases.               Case-1:    : Since the  operator  has been used, the closing state, , of  is deƒè≈π¬Åned as  the earliest state in  such that     and for each  state  preceding  in  ,     (and since  is the  earliest such state,     ). The -value of  is the  total delay from the starting state of  to state . Since   is a Min-max CTL formula, evaluation of  (using  Proceedings of the 10th International Symposium on Temporal Representation and Reasoning and  Fourth International Conference on Temporal Logic (TIME-ICTL√¢¬Ä¬ô03) 1530-1311/03 $17.00 √Ç≈† 2003 IEEE   √ÇÀù ) at each node  returns a value. The value of the path is the minimum among these values.  The state  in which returns this minimum value is  called the contributing state of .  We have two cases under this, namely if √Ç≈æ is a CTL  formula, or if √Ç≈æ is a Min-max CTL formula.  Case-1A: √Ç≈æ is CTL: In this case, by deƒè≈π¬Ånition of  Min-max CTL, the function must be a funcand the  -value of  tion of the -value of  .      evaluates to the value of   .  Case-1B: √Ç≈æ is Min-max CTL: In this case, the  function  is a function of the -value of ,  the  -value of , and the -value computed by   √Ç≈æ  , where  is the closing state of  .      evaluates to the value of     .  Case-2:   √ÇÀù    √Ç≈æ : This situation is similar  to the Case-1, except that we have a  quantiƒè≈π¬Åer before √ÇÀù . Therefore, the  -value of the path is the maximum among the values returned by  √ÇÀù    among the states  preceding the closing state of the  path. The state  in which returns this maximum  value is called the contributing state of .  Again we have two cases depending on whether √Ç≈æ is  CTL or Min-max CTL.  Case-2A: √Ç≈æ is CTL: This is similar to Case-1A,  and     evaluates to the value of   .  Case-2B: √Ç≈æ is Min-max CTL: This is similar to  Case-1B, and     evaluates to the    .  value of  Case-3:   √ÇÀù    √Ç≈æ : Since the   operator  has been used, the closing state, , of is the last state  in such that   √Ç≈æ and for each state  preceding   in ,   √ÇÀù . Such a last state is well deƒè≈π¬Åned except  when for each state  of ,   √ÇÀù and some state √Ç≈∫  such that √Ç≈∫  √Ç≈æ occurs inƒè≈π¬Ånitely often in (that is,  the path describes a cycle through √Ç≈∫ ). In such cases the  -value of is taken to be . Otherwise the -value  of is the total delay from the starting state of to  the closing state . Since √ÇÀù is a Min-max CTL formula, evaluation of √ÇÀù (using  √ÇÀù  ) at each  node  returns a value. The  -value of the path is the  minimum among these values. The state  in which  returns this minimum value is called the contributing  state of .  Again we have two cases depending on whether √Ç≈æ is  CTL or Min-max CTL.  Case-3A: √Ç≈æ is CTL: This is similar to Case-1A,  and     evaluates to the value of   .  Case-3B: √Ç≈æ is Min-max CTL: This is similar to  Case-1B, and     evaluates to the  value of    .  Case-4:   √ÇÀù    √Ç≈æ : This situation is similar to Case-3, except that we have a  quantiƒè≈π¬Åer  before √ÇÀù instead of a  quantiƒè≈π¬Åer. Therefore, the  -value of the path is the maximum among the values  returned by  √ÇÀù   among the states  preceding the closing state of the path. The state  in which  returns this maximum value is called the contributing  state of .  Again we have two cases depending on whether √Ç≈æ is  CTL or Min-max CTL.  Case-4A: √Ç≈æ is CTL: This is similar to Case-1A,  and     evaluates to the value of   .  Case-4B: √Ç≈æ is Min-max CTL: This is similar to  Case-1B, and     evaluates to the  value of    .  The evaluation of a Min-max CTL state formula,  , on a  state, , is as follows:  Case-1:      √Ç≈∫ : In this case,    evaluates to the minimum among the non-null values returned by   √Ç≈∫    for each path, , starting  at .  Case-2:      √Ç≈∫ : In this case,      evaluates to the maximum among the non-null values  returned by   √Ç≈∫    for each path, , starting  at .  Case-3:      √Ç≈∫ : In this case,    evaluates to the minimum among the values returned by    √Ç≈∫   for each path, , starting at . Note  that since    ,   √Ç≈∫    will not return null  for any of the paths, .  Case-4:      √Ç≈∫ : In this case,      evaluates to the maximum among the values returned  by   √Ç≈∫    for each path, , starting at .  Note that since    ,   √Ç≈∫    will not return null for any of the paths, .  5 Un-quantiƒè≈π¬Åed until-operator in Min-max  CTL  The syntax of basic Min-max CTL allows evaluation of  path formulas having only the quantiƒè≈π¬Åed until operators,  Proceedings of the 10th International Symposium on Temporal Representation and Reasoning and  Fourth International Conference on Temporal Logic (TIME-ICTL√¢¬Ä¬ô03) 1530-1311/03 $17.00 √Ç≈† 2003 IEEE   and . In this section we show that allowing the  un-quantiƒè≈π¬Åed CTL until operator in Min-max CTL evaluation enhances the expressive power of Min-max CTL without any signiƒè≈π¬Åcant compromise on the computational complexity of evaluation. We ƒè≈π¬Årst illustrate the utility of this  extension through an example.  Example 5.1 Consider the timed model shown in Figure 5.  The states labeled by req represents requesting states (for  some resource), and the states labeled by gr represents  states where the resource is granted. The delays are shown  besides the edges. The delay from a request state,  to the  earliest grant state, , following  on a path  will be referred to as the response time for  along  .  Now suppose we wish to determine the best response  time from any requesting state reachable from  (not necessarily the earliest or the latest). The basic formulation  of Min-max CTL cannot express this query, since all until  operators used in evaluation are either   or . By  allowing the un-quantiƒè≈π¬Åed CTL until operator, we can write  this query as follows:              The best response times from the requesting states  ,   and  are respectively , , and . Therefore this query  evaluates to at  .        5.1 Syntax and Semantics  s0  The formal syntax of this extension of Min-max CTL  is as follows.  denotes the set of boolean formulas over  the set of atomic propositions   , denotes CTL  formulas, and denotes Min-max CTL formulas.  and   √Ç≈∫ are user deƒè≈π¬Åned functions.  1  req  s1  5  5  req  s3  s5  gr  s4  gr                                                                                      As in the basic Min-max CTL, we deƒè≈π¬Åne    to          2  1  5  req  s2  √Ç≈∫  2  10  10  √Ç≈∫  s6  gr  Figure 5. Timed model √¢¬Ä¬ì 3  Suppose we wish to determine the best response time  from the earliest requesting state. This query may be expressed in the basic formulation of Min-max CTL as follows:                Since the earliest requesting state is  , the value evaluated  for this query is the best response time from  , that is, .  Similarly, if we wish to determine the best response time  from the last requesting state, we may express the query in  the basic Min-max CTL as follows:                  Since the last requesting state is always  , the value evaluated for this query is the best response time from  , that is,  .    √Ç≈∫  √Ç≈∫  denote the value evaluated by the extended Min-max CTL  state formula,  , on a state, , of the timed model. Also,  we use the function,     to denote the value  evaluated by the Min-max CTL path formula,  , on a path,  , of the timed model, with respect to the cost function,  .  The semantics of evaluation is similar to that of the  basic Min-max CTL, except for the path formulas where  we use the un-quantiƒè≈π¬Åed CTL until operator. We present  the semantics of evaluation for such path formulas. Let     . Since the un-quantiƒè≈π¬Åed operator has  been used, the closing state, , of a path  can be any state  in  such that    and for each state  preceding  in  ,    . Thus, unlike in the case of the basic Minmax CTL, we may have multiple closing states on a path  .  Therefore, the semantics of evaluation of a path formula on  a path is deƒè≈π¬Åned in terms of the state which is chosen as the  closing state.  The semantics of     for a given closing  state    is as follows:                     The -value of  (with respect to ) is deƒè≈π¬Åned as the  total delay from the starting state of  to state . We  Proceedings of the 10th International Symposium on Temporal Representation and Reasoning and  Fourth International Conference on Temporal Logic (TIME-ICTL√¢¬Ä¬ô03) 1530-1311/03 $17.00 √Ç≈† 2003 IEEE  have two cases, namely if √Ç≈æ is a CTL formula, or if  is a Min-max CTL formula.  √Ç≈æ  Case-1: √Ç≈æ is CTL: In this case, by deƒè≈π¬Ånition of  Min-max CTL, the function  must be a function  of the  -value of  .      evaluates to  the value of   .  Case-2: √Ç≈æ is Min-max CTL: In this case, the function  is a function of the  -value of   and the -value computed by   √Ç≈æ .       evaluates to the value of    .  The choice of the closing state depends on the quantiƒè≈π¬Åer, ,  preceding the  or  operator. For example, for formulas  of the form   √Ç¬¥√Çƒæ √ÇÀù  √Ç≈æ , the closing state which  minimizes the value of    is the desired closing state.  6 Algorithm for Evaluation  In this section we provide an outline that the algorithm  for basic Min-max CTL evaluation [10] can be extended  for the evaluation of the extensions presented in Section 4  and Section 5. As in the basic Min-max CTL evaluation    is  algorithm, we assume that the cost function,    monotonic (increasing or decreasing) with respect to  ,  and  .  By the semantics of the extension of Section 4, a state  can be a contributing state in a path only if the path does not  contain any state  preceding its closing state which returns  a better value. For each state , the algorithm considers  those paths where  is the contributing state, and evaluates  the best among them for each possible closing state. Monotonicity with respect to both and  ensures the correctness  of the value evaluated.  For the extension presented in Section 5, we need an algorithm to evaluate an extended Min-max CTL formula of  the form    √ÇÀù  √Ç≈æ  in a state. Since the other  Min-max CTL formulas are basic Min-max CTL formulas,  their evaluation remains the same.  Deƒè≈π¬Ånition 6.1 [f-path and f-cycle: ]  A path,  , starting at a state  and going through a state √Ç≈∫  is called a √¢¬Ä¬úf-path from  through √Ç≈∫ √¢¬Ä¬ù iff the state formula  holds in all states preceding √Ç≈∫ in  . A f-cycle through a  state is a f-path from through .  A shortest length -path from a state  through a state √Ç≈∫  is one where √Ç≈∫ occurs as early as in any other -path from   through √Ç≈∫ . The longest length -path from  through √Ç≈∫  is deƒè≈π¬Åned similarly, where √Ç≈∫ occurs at least as late as any  other -path from  through √Ç≈∫ . Obviously, a shortest length  -path will have no -cycles. Hence shortest length -paths  can be found using any standard shortest path algorithms on  the state transition graph in polynomial time [9].  The algorithm which we develop is a labeling algorithm.  A state, , in the timed model is labeled by a sub-formula,  , iff its CTL restriction is true in that state. Further, if the  sub-formula is a Min-max CTL formula, then the evaluation  .  algorithm augments the label with the value   We develop the algorithm to evaluate the Min-max query  for all the above extensions. We also prove the correctness  of the algorithm and it is established that the algorithm runs  in polynomial time. Due to the space constraint, we are  not presenting the correctness proof of the algorithm in this  paper. The algorithm for evaluation of complete Min-max  CTL is presented in Appendix.  Lemma 6.1 The complexity of ƒè≈π¬Ånding the length of a shortest -path or a longest -path from a state  to a state in a  timed model is       , where  is the number of states in the model and  is the size of the transition  relation .  Proof: Each -path from  to includes only states which  are labeled , and the state . We ƒè≈π¬Årst remove from the transition graph those states (except ) which are not labeled  and the set of transitions to and from these states. This  can be done in     time. All paths in the reduced  transition graph are -paths.  Finding the shortest path between a pair of nodes in  a graph with non-negative edge costs requires        time where  denotes the number of edges in  the graph [9].  For determining the longest path length, we require to  consider the cycles in the graph. If we ƒè≈π¬Ånd a path from  to  through a state  which is self-reachable (that is,  belongs  to a -cycle), then the longest path length from  to is .  Otherwise, we use the algorithm for acyclic graphs. This  can be achieved in     time.  Theorem 6.1 Algorithm  Evaluate  requires     √Ç≈º       time to evaluate a Monoon a timed  tonic Min-max CTL formula of length  model      √Ç≈∫   Proof: Step 2.4 and Step 2.5 can be done by a single  depth-ƒè≈π¬Årst traversal in     time. Step 2.6 requires  us to determine whether states in  belong to any -cycle.  , this  Since the worst case number of states in  is  step can be completed in        time. By  virtue of Lemma 6.1, the complexity of Step 2.7.1.2    .  Therefore,  and Step 2.9.1.1 is     the complexity of evaluating the formula at one state is           (when Step 2.7 or Step 2.9  requires) and the complexity of evaluating the formula at  √Ç≈æ    every state is given by     .  In Step 2.8, we are required to ƒè≈π¬Ånd -paths from  to  through a speciƒè≈π¬Åc state . For a given , and , the shortest  Proceedings of the 10th International Symposium on Temporal Representation and Reasoning and  Fourth International Conference on Temporal Logic (TIME-ICTL√¢¬Ä¬ô03) 1530-1311/03 $17.00 √Ç≈† 2003 IEEE  path from to  combined with the shortest path from  to   yields a shortest path from to  through . Determining  this requires        time. A similar argument  applies to the longest path problem when paths through self  reachable states are considered to be of length  and we  can determine the longest path from to  through  in       time (similar to Lemma 6.1). Since in the  worst case, we may need to execute the algorithm for each  choice of ,  and , the total complexity of evaluating a formula at all states given the Min-max values of its subformulas at all states is   √Ç≈º       . By induction  on the length of the formula, the complexity of Algorithm  Evaluate is     √Ç≈º       .  7 Conclusion  Model checking with temporal logics such as TCTL,  TLTL and RTCTL which explicitly reason about timing  properties of transition systems is known to be more complex than reasoning about untimed temporal logics such  as CTL. Speciƒè≈π¬Åcally, CTL is attractive because it can be  checked in time polynomial in the size of the transition  system. Min-max CTL can be used to express interesting  queries about the best case and worst case temporal behaviors of timed models. In this paper, we have extended  Min-max CTL in three directions, exhibiting increase in expressive power in each case. Signiƒè≈π¬Åcantly, we have shown  that each extension can still be evaluated in polynomial time  thereby preserving the attractive computational complexity  of Min-max CTL. After having these interesting extensions  of basic Min-max CTL, the query language Min-max CTL  becomes more expressive.  It is observed that a large class of the min/max type of  path queries over graphs (like minimum cost path) which  are polynomial time solvable can be expressed in Min-max  CTL. However there are some graph properties where resultant graph is a subtree instead of a path of the original graph  can not be expressed in Min-max CTL. One such example is ƒè≈π¬Ånding the minimum cost spanning tree of a graph.  Similarly the property like √¢¬Ä¬úwhat is the minimum distant  to cover all nodes labeled with √¢¬Ä¬ù can not be expressed in  Min-max CTL. Currently, we are looking for an extension  of Min-max CTL to express such type of graph properties.  References  [1] R. Alur.  Timed automata.  Manuscript:  www.cis.upenn.edu/ alur/Nato97.ps.gz, 1998.  [2] R. Alur, C. Courcoubetis, and D. Dill. Model checking in  dense real-time. Information and Computation, 104(1):2√¢¬Ä¬ì  34, 1993.  [3] R. Alur and T. A. Henzinger. Real time logics: Complexity and expressiveness. Information and Computation,  104(1):35√¢¬Ä¬ì77, 1993.  [4] R. Alur and T. A. Henzinger. A really temporal logic. JACM,  41(1):181√¢¬Ä¬ì204, 1994.  [5] J. R. Burch, E. M. Clarke, D. E. Long, K. L. McMillan, and  D. L. Dill. Symbolic model checking for sequential circuit  veriƒè≈π¬Åcation. IEEE Transaction on Computer Aided Design,  4(4):401√¢¬Ä¬ì424, 1994.  [6] S. V. Campos, E. M. Clarke, W. Marrero, and M. Minea.  Verus: A tool for quantitative analysis of ƒè≈π¬Ånite-state realtime systems. Workshop on Languages, Compilers and  Tools for Real-Time Systems, 1995.  [7] E. M. Clarke, E. A. Emerson, and A. P. Sistla. Automatic  veriƒè≈π¬Åcation of ƒè≈π¬Ånite-state concurrent systems using temporal logic speciƒè≈π¬Åcations. ACM Transaction on Programming  Languages & Systems, 8(2):244√¢¬Ä¬ì263, 1986.  [8] E. M. Clarke and R. P. Kurshan. Computer aided veriƒè≈π¬Åcation. IEEE Spectrum, 33(6):61√¢¬Ä¬ì67, 1996.  [9] T. H. Cormen, C. E. Leiserson, and R. L. Rivest. Introduction to Algorithms. McGraw-Hill, The MIT Press Cambridge, 1990.  [10] P. Dasgupta, P. P. Chakrabarti, J. K. Deka, and S. Sriram.  Min-max computation tree logic. Artiƒè≈π¬Åcial Intelligence,  (127):137√¢¬Ä¬ì162, March 2001.  [11] E. A. Emerson, A. K. Mok, A. P. Sistla, and J. Srinivasan.  Quantitative temporal reasoning. First Annual Workshop on  Computer-Aided Veriƒè≈π¬Åcation, 1989.  [12] J. Nilsson. Principles of Artiƒè≈π¬Åcial Intelligence. Morgan  Kaufmann Publisher Inc., 1980.  Appendix  The algorithm which we describe is a labeling algorithm.  A state, , in the timed model is labeled by a sub-formula,   , iff its CTL restriction is true in that state. Further, if the  sub-formula is a Min-max CTL formula, then the evaluation  algorithm augments the label with the value    .  Algorithm Evaluate(f,s)  1. Use CTL model checking techniques to label the states  of the model with the sub-formulas of the CTL restriction  of  . During this step, we ignore the delays on the  transitions of the timed model.  2. The evaluation at a state, , of a Min-max CTL formula,  √Ç≈∫√Ç≈∫     √ÇÀù  √Ç≈∫ √Ç≈æ , where , √Ç≈∫ and √Ç≈∫√Ç≈∫  are  or  quantiƒè≈π¬Åers, is done as follows.  The procedure for evaluating formulas of the form  √Ç≈∫√Ç≈∫     √ÇÀù  √Ç≈∫ √Ç≈æ  is exactly similar.  2.1 Recursively evaluate all Min-max CTL subformulas  of  at all states of the model.  then deƒè≈π¬Åne   √ÇÀù  2.2 If √Ç≈∫ is  else deƒè≈π¬Åne   √ÇÀù  √Ç≈æ .  2.3 If       Proceedings of the 10th International Symposium on Temporal Representation and Reasoning and  Fourth International Conference on Temporal Logic (TIME-ICTL√¢¬Ä¬ô03) 1530-1311/03 $17.00 √Ç≈† 2003 IEEE  √ÇÀù  √Ç≈æ  then deƒè≈π¬Åne   √ÇÀù  2.4 Let denotes the set of states labeled  reachable from along -paths.        √Ç≈æ, which are  2.5 Let denotes the set of states which belong to any  -path from to any state of       then:    2.6 If √Ç≈∫ is  2.6.1 Remove each state from such that:  (a) does not belong to any -cycle, and  (b) For each successor √Ç≈∫ of , √Ç≈∫  √ÇÀù  √Ç≈æ .  2.6.2 Label a state from with the symbol  if:  (a) belongs to a -cycle, and  (b) For each successor √Ç≈∫ of , √Ç≈∫  √ÇÀù  √Ç≈æ .                                      2.7 If  √ÇÀù √Ç≈∫ √Ç≈æ , then  2.7.1 For each state  do:  2.7.1.1 If is labeled  then set   and  , where  compute  .  √Ç≈æ  2.7.1.2 Else Consult Table 1 to determine the  required path type from to , determine  the length of that path, and compute  , where  .  √Ç≈æ  2.7.2 If is  ,  set        else set      .                    ,                   2.8.2 If  is ,      set      else set          2.9 If    √ÇÀù  √Ç≈æ           2.8.1.6 If is  , then  2.8.1.6.1 If   ,  then set  2.8.1.6.2 Otherwise, set                    2.9.1 For each state  do:  2.9.1.1 Consult Table 2 to determine the required  path type from to and compute  , where  .  √Ç≈æ  ,  2.9.2 If is  set        else set      .                                                 -Type  -  - Best path type from  to    Type Type               Increasing  min  min Shortest length √ÇÀù  √Ç≈æ-path     Increasing  min  max Shortest length √ÇÀù -path         Increasing  max  min Longest length √ÇÀù  √Ç≈æ-path         Increasing  max max Longest length √ÇÀù -path  Decreasing min  min Longest length √ÇÀù  √Ç≈æ-path  2.8 If     √ÇÀù  √Ç≈æ , then  Decreasing min  max Longest length √ÇÀù -path  2.8.1 For each state   do:  √Ç≈æ-path  Decreasing max  min Shortest length √ÇÀù  2.8.1.1 Let   √ÇÀù    Decreasing max max Shortest length √ÇÀù -path  2.8.1.2 If  is  then deƒè≈π¬Åne  as the set  of states, , such that    and √ÇÀù  .  2.8.1.3 If  is  then deƒè≈π¬Åne  as the set  Table 1. Best path types for     of states, , such that  or                            √ÇÀù    √Ç≈æ  √ÇÀù    √Ç≈æ    and √ÇÀù  .  do:  2.8.1.4 For each state  2.8.1.4.1 Let   √Ç≈æ    2.8.1.4.2 If there is no path from  to  through  and from  to solely through  -Type  -Type Best path type from  to  states in  , Set      2.8.1.4.3 Else  Increasing  min  Shortest length √ÇÀù -path  2.8.1.4.3.1 If is labeled then set   Increasing  max  Longest length √ÇÀù -path  and Compute         Decreasing  min  Longest length √ÇÀù -path  2.8.1.4.3.2 Else Consult Table 1 to determine  Decreasing  max  Shortest length √ÇÀù -path  the required path type from  to through   and from  to solely through states from  .  Compute        accordingly.  2.8.1.5 If  is , then  Table 2. Best path types for    √ÇÀù  √Ç≈æ   ,    ,  2.8.1.5.1 If  then set      √Ç≈∫√Ç≈∫  √Ç≈∫  √Ç≈∫    √Ç≈∫√Ç≈∫      √Ç≈∫√Ç≈∫    √Ç≈∫              2.8.1.5.2 Otherwise, set  Proceedings of the 10th International Symposium on Temporal Representation and Reasoning and  Fourth International Conference on Temporal Logic (TIME-ICTL√¢¬Ä¬ô03) 1530-1311/03 $17.00 √Ç≈† 2003 IEEE  √Ç≈∫√Ç≈∫  √Ç≈∫   